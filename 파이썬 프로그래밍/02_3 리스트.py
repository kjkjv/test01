# 02-3 리스트.py

# list : mutable 자료형, 시퀀스(연속, 순서형), 파이썬 자료중에서 가장 많이 쓰임
# 문자열은 변형이 불가능하지만 리스트는 변형이 가능하다.
# [] : 대괄호 사용

a = [1,2,3,4,5,6,7,8,9]

print(a)
print(type(a))     # <class 'list'>


a = []
#  빈 리스트를 만들어서 여러 값들을 모은다. 변수 여러개


#  인덱싱
print(a[0],a[1],a[2],a[8])
print(a[-1],a[-2],a[-3],a[-4])
a[0] = 10
print(a)                       # 객체는 그대로 있고 요소가 바뀜.
a[0] = 1                       # mutable 자료이므로 요소의 변경이 가능하다
print(a)

# 슬라이싱
print(a[1:5])                  # a[시작옵셋 : (끝옵셋 +1) ]
print(a[:5])

a[1:5] = [20,30,40,50]         # 변형이 자유롭다
print(a)

# a [ 시작옵셋 : (끝옵셋 +1) : 간격(step) ]
print(a[0:8:2])     # 홀수만 출력 (2 간격으로)
print(a[8::-1])     # 거꾸로 가라는 뜻이니 거꾸로 입력해줌, [9, 8, 7, 6, 50, 40, 30, 20, 1]

a[0::2] = [10, 30, 50, 70, 90]
print(a)                        # [10, 20, 30, 40, 50, 6, 70, 8, 90] 하나 건너서 바뀜.


# range 함수는 알아서 0부터 시작값
# range는 range(시작숫자, 종료숫자, step)의 형태로 리스트 슬라이싱과 유사

l = list(range(10))             # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 0부터 시작함

l = list(range(1,10))
print(l)                        # [1, 2, 3, 4, 5, 6, 7, 8, 9]

l = list(range(1,10,2))         # 스텝의 개념
print(l)                        # [1, 3, 5, 7, 9]

# sum() 함수 : 시퀀스형 데이터의 총합을 구한다
a = [1,2,3,4,5,6,7,8,9]
print(sum(a))
print(max(a))
print(min(a))


list(range(1,10))
print(type(list))


#  list 연산
a = [1,2,3,4,5]
b = [3,4,5,'v','v']
c = a + b
print(c)          # 합연산

d = a * 3
print(d)          # 곱셈은 반복 연산자

 print(len(a))    # 5, 길이 구하는 법

 print( 3 in a )  # True, a 안에 3이 있는가?
 print( 7 in a)   # False


# 추가 제거

del b[0]
print(b)         # 원하는 객체 삭제, 시스템 제어 함수가 되어서 가능한 사용하지 않는다.

a.append(4)      # 4를 추가 mutable 이라 함수가 아예 바뀐다
print(a)
ret = a.append(4)
print(ret)       # None(아무 객체도 없다), return은 해야겠는데 값이 특별히 없다면  !=  NaN(not a number)
a.append([5,6])  # [1, 2, 3, 4, 5, 4, [5, 6]] 여러개가 들어가는 것은 리스트가 추가되는 것이다.
print(a)

a.insert(1,1.5)  # [1, 1.5, 2, 3, 4, 5] , insert(인덱스, 데이터)

a.remove(4)      # [1, 2, 3, 5], 원하는 값을 집어넣으면 삭제가 된다

# stack 자료 구조의 형태, 자료 장소에 데이터가 쌓임, 'last in first out' 개념
# 이걸 꺼내는 것이 pop 이다.
a.pop()          # 리스트의 마지막 요소를 제거
a.pop(0)         # 원하는 인덱스를 삭제할 수도 있다

# 정렬, sort
a = [1,5,4,3,3]
a.sort()          # 데이터를 정렬(오름차순)
print(a)          # [1, 3, 4, 5]

a.index(3)        # 데이터가 몇 번 인덱스인지, 제일 먼저 있는 데이터
a.index(200)      # 없는 데이터는 에러

print(a.count(3)) # 데이터 숫자를 세주는 함수

a.reverse()           # [5, 4, 3, 2, 1], 단순히 순서를 반대로
a.sort(reverse=True)  # 요런 것도 가능, 역순 정렬(내림차순),  [5, 4, 3, 2, 1]

a = [1,2,3]
b = [4,5,6]
a.extend(b)       # a = a+b
print(a)          # [1, 2, 3, 4, 5, 6]


# 확장 슬라이싱 : 시작과 끝값이 없고 step값 만 지정  ==> 그렇게 큰 개념은 아님
c = [0,1,2,3,4,5,6,7,8,9,10]
print(c[::2])


# 중첩리스트 : 리스트 안에 또 다른 리스트가 포함
# 리스트가 또 만들어진 것이당 참고하는 객체일 뿐. 하나의 데이터에 모든 데이터가 들어있는 것이 아니라 인덱스가 참조만 하는 것.
# 2중
a = [1,2,3,4,[5,6,7]]
print(a[4])                    # [5, 6, 7]
print(a[4][0])                 # 5
# 3중
a = [1,2,3,4,[5,6,7,[8,9,10]]]
print(a[4][3][1])              # 9

# 리스트 안에 또 다른 리스트
a = [7,8,9]
b = [4,5,6,a]                  # [4, 5, 6, [7, 8, 9]]
c = [1,2,3,b]                  # [1, 2, 3, [4, 5, 6, [7, 8, 9]]]
print(b)
print(c)
a = [10,11,12]                 # 객체를 바꾼 것은 참조값은 예전의 값으로 한다
print(b)
print(c)
a[0] = 10                      # 객체안의 요소를 바꾸면 참조값도 바뀐다
print(b)
print(c)


# 리스트 내장(list comprehension)
a = [k for k in range(10)]        # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 앞의 k 는 반복되는 수를 받는 변수다.
print(a)
a = [1,2,3,4,5,6,7]
b = [k for k in a if k > 4]       # [5, 6, 7]
print(b)

d = [k for k in a if k % 3 !=0]       # [1, 2, 4, 5, 7]
print(d)


# for 문
# 들여쓰기로 구분한다. 들어쓰기가 끝나는 곳까지 반복한다.
total = 0
for k in range(1,11,2):           # k 는 for문이 한번 돌 때마다 변하는 변수, in 뒤에는 범위
    print(k)
    total = total + k
print('total:', total)

total = 0
# for k in range(11): from 0 to 10, step = 1
# for k in range(1,11): from 1 to 10, step = 1
# for k in range(1,11,2): from 1 to 10, step = 2
for k in range(1,11,2) :
    print(k)
    total = total + k
print('total:', total)

a = [10,20,30,40,50,60,70,80,90]
print(a[0],a[2],a[4],a[6],a[8])      # 10 30 50 70 90
print(a[::2])                        # [10, 30, 50, 70, 90] 단, 리스트로 나옴

for k in range(0,9,2):
    print(a[k], end = ' ')           # 10 20 30 40 50 60 70 80 90 end를 지정




# ==============for~in==================================
# [<식> for <타깃1> in <객체1>
#          .....
#       for <타깃n> in <객체n>
#       (if<조건식>)]

#     for~in 절은 객체의 항목을 반복한다
#     객체는 시퀀스형 데이터여야 한다
#     for문으로 취해지는 각각의 데이터 값은 <식>에서 사용한다:
#     마지막 if 절은 선택 요소이다 만일 if 절이 있으면
#     <식>은 <조건식>이 참일 때만 값을 계산하고 결과에 추가한다.


seq1 = 'abc'    # 문자열
seq2 = (1,2,3)  # 튜플

l = [(x,y) for x in seq1 for y in seq2]    # 따라하면서 연습하면 된다!!
# [('a', 1), ('a', 2), ('a', 3),
# ('b', 1), ('b', 2), ('b', 3),
# ('c', 1), ('c', 2), ('c', 3)]
print(l)

